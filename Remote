# Author: Michael Wazir | WSU Everet | Last Modified: 5/1/17
# EE 234 - Final Project - RC Car
# Hardware: chipKIT MX4 by Digilent | BT2 Bluetooth Module (Digilent) | Joystick Module (Digilent)
# Description: This main file includes the code written to conrol an RC Car from a remote control via bluetooth.
               The bluetooth module implemented, used a UART protocal to interface with the microcontroller. Also
               the joystick module implemented, used SPI protocal to interdace with the microcontroller. This code
               takes the input from the joystick and packs into usable numbers,then based on the input, transmits
               an instruction to the robot via bluetooth.
.global main
# ****************************************************
#              chipKIT MX4 SPI Pins                  *
# ****************************************************
#   SPI2:              SPI1:                         *
#     ? SS2  JB-01       ? SS1  J1-01 (also JD-03)   *
#     ? SDO2 JB-02       ? SDO1 J1-02 (also JH-08)   *
#     ? SDI2 JB-03       ? SDI1 J1-03 (also JK-10)   *
#     ? SCK2 JB-04       ? SCK1 J1-04 (also JD-09)   *
#                                                    *
#  * * * * * * * * * * * * * * * * * * * * * * * * * *  
.data
    clear_disp2: .byte 0x1B, '[', 'j', 0x00
    joy_data: .byte 0,0,0,0,0,0
    char_num: .byte 0,0,0,0,0,0
    forward: .byte 1,0
    right: .byte 2,0
    left: .byte 3,0
    backward: .byte 4,0
    brake: .byte 5,0
.text
    
.ent main
main:
    
    # Setting up UART1,2 and SPI2
    JAL setup_UART
    JAL setup_SPI
    JAL delay2
       
    LA $a0, clear_disp2
    JAL sendLCD
    main_loop:
	
# 	JAL receive # Stores X(Low Bytea1),X(High Byte),Y(Low Byte),Y(High Byte) to joy_data
#  	LA $a0, joy_data 
# 	JAL send
 	# -----------
	JAL receive # Stores X(Low Byte),X(High Byte),Y(Low Byte),Y(High Byte) to joy_data
	LA $t0, joy_data # Loads array with x,y values
	LB $t1, 1($t0) # get the Lower 8 bits of the x value
	ANDI $t1, $t1, 0xFF # we only care about the lower eight bits
	LB $t2, 2($t0) # get the Upper 8 bits of the x value
	ANDI $t2, $t2, 0x3 # we only care about the upper eight bits
	SLL $t2, $t2, 8 # shift the upper eight bits to be in bits 15-8
	OR $t2, $t1, $t2 # combining the lower and upper bits of the X value, to make one X value number
	
	LI $t6, 600
	LI $t7, 400
	# X-axis instructions
	# Check Axises
	BLT $t2, $t6, notRight
	LA $a0, right
	JAL send
	J main_loop

	notRight:
	BGT $t2, $t7, getY
	LA $a0, left
	JAL send
	J main_loop
	
	
	getY:
	# -------------
	# same routine but for the y values
 	JAL receive 
 	LA $t0, joy_data
	LB $t1, 3($t0)
	ANDI $t1, $t1, 0xFF
	LB $t2, 4($t0)
	ANDI $t2, $t2, 0x3
	SLL $t2, $t2, 8
	OR $t2, $t1, $t2
	
	notLeft:
	# Y-axis instructions
	BLT $t2, $t6, notForward
	LA $a0, forward
	JAL send
	J main_loop


	notForward:
	BGT $t2, $t7, notBackward
	LA $a0, backward
	JAL send
	J main_loop

	# IF centered, then brake
	notBackward:
	LA $a0, brake
	JAL send

       J main_loop
    
.end main

# ------------------------------------------------------------------------------

.ent setup_SPI
setup_SPI:
#   master mode / 8-bit

#   2.Stop and reset the SPI module by clearing the ON bit.
    LW $zero, SPI2CON
#   3.Clear the receive buffer.
    LB $t0, SPI2BUF
#   4.Clear the ENHBUF bit (SPIxCON<16>) if using Standard Buffer mode or set the bit if using Enhanced Buffer mode.
#     LI $t0, 1 << 16
#     SW $t0, SPI2CON
#   5.Write the Baud Rate register, SPIxBRG.
    LI $t0, 255
    SW $t0, SPI2BRG
#   7.Write the desired settings to the SPIxCON register with MSTEN (SPIxCON<5>) = 1.
#     LI $t0, 0x8020
#     SW $t0, SPI2CON
    SW $zero, SPI2STAT
    # SS support enabled
    LI $t0, 0x8160
    SW $t0, SPI2CON
#   9.Set SS2 as output
    LI $t0, 1 << 9
    SW $t0, TRISGCLR
#   Drive SS2 HIGH
    LI $t0, 1 << 9
    SW $t0, LATGSET
    
    JR $ra
    
.end setup_SPI
    
# ------------------------------------------------------------------------------
    
.ent receive
receive:
    ADDI $sp, $sp, -16
    SW $ra, 0($sp)
    SW $a1, 4($sp)
    SW $a0, 8($sp)
    # SS LOW
    LI $t0, 1 << 9
    SW $t0, LATGCLR
    JAL delay2
    
    # Byte 1, Button states
    SB $zero, SPI2BUF
    
    waiting:
    LW $t0, SPI2STAT
    ANDI $t0, $t0, 1 << 11
    BNEZ $t0, waiting
    
    LB $t0, SPI2BUF
    LA $t1, joy_data
    SB $t0, 0($t1)
    JAL delay2
 # * * * * * * * * * * * * * * 
 # Byte 2, X low byte
    SB $zero, SPI2BUF
    LB $t0, SPI2BUF
    SB $t0, 1($t1)
    JAL delay2

# * * * * * * * * * * * * * * 
# Byte 3, X high Byte
    SB $zero, SPI2BUF
    LB $t0, SPI2BUF
    SB $t0, 2($t1)
    JAL delay2
# * * * * * * * * * * * * * * 
# Byte 4, Y Low Byte
    SB $zero, SPI2BUF
    LB $t0, SPI2BUF
    SB $t0, 3($t1)
    JAL delay2
# * * * * * * * * * * * * * * 
# Byte 5, Y High Byte
    SB $zero, SPI2BUF
    LB $t0, SPI2BUF
    SB $t0, 4($t1)
    JAL delay2
    
    # SS HIGH
    LI $t0, 1 << 9
    SW $t0, LATGSET
    JAL delay2
    
    LW $a0, 8($sp)
    LW $a1, 4($sp)
    LW $ra, 0($sp)
    ADDI $sp, $sp, 16
    
    JR $ra
    
.end receive
    
# ------------------------------------------------------------------------------
    
# .ent sendToRC
# sendToRC:
#     ADDI $sp, $sp, -8
#     SW $t0, 0($sp)
#     SW $t2, 4($sp)
#      MOVE $t0, $a0
# #     startSend:
# #     LW $t1, $t0
# #     ADDI $t0, $t0, 1
# #     BEQZ $t0, endSend
#     waitToSend:
#         LW $t2, U2STA
#         ANDI $t2, $t2, 1 << 9
#         BEQZ $t2, endWaitToSend
#         J waitToSend
#     endWaitToSend:
#     SB $t0, U2TXREG
# #     j startSend
#     endSend:
#         jr $ra
# 	
#     ADDI $sp, $sp, 8
#     LW $t0, 0($sp)
#     LW $t2, 4($sp)
# .end sendToRC
	
	
.ent delay2
delay2:
    
    LI $a0, 20000
    delay2_loop:
	BEQZ $a0, end_delay2
	ADD $a0, $a0, -1
	J delay2_loop
    end_delay2:
    JR $ra
    
.end delay2
    
.ent convert
convert:
    LI $t6, 10
    DIV $a1, $t6
    LA $t0, char_num
    MFHI $t1
    ADDI $t1, $t1, 48
    SB $t1, 4($t0)
    MFLO $a1
    
    DIV $a1, $t6
    MFHI $t1
    ADDI $t1, $t1, 48
    SB $t1, 3($t0)
    MFLO $a1
    
    DIV $a1, $t6
    MFHI $t1
    ADDI $t1, $t1, 48
    SB $t1, 2($t0)
    MFLO $a1
    
    DIV $a1, $t6
    MFHI $t1
    ADDI $t1, $t1, 48
    SB $t1, 1($t0)
    MFLO $a1
    
    DIV $a1, $t6
    MFHI $t1
    ADDI $t1, $t1, 48
    SB $t1, 0($t0)
    MFLO $a1
    
    JR $ra
.end convert

# ***************************************
    
.ent setup_UART
setup_UART:
    
# ******************************************************************************
#                 Setting up UART1 for LCD Module (Transmitting)               
# ******************************************************************************

# Setting baud rate to 9600
LI $t0, 259
SW $t0, U1BRG

# UART1 serial frame: 8 data bits, no parity, 1 stop bit
SW $zero, U1MODE # Reset UART
SW $zero, U1STA
    
# Enable UART Transmission
LI $t0, 1 << 10
SW $t0, U1STA

# Enable UART Module
LI $t0, 1 << 15
SW $t0, U1MODE
    
# ******************************************************************************
#                Setting up UART2 for Bluetooth Module (Receiving)                
# ******************************************************************************
    
# Setting baud rate to 9600
LI $t0, 259
SW $t0, U2BRG
    
# UART2 serial frame: 8 data bits, no parity, 1 stop bit
SW $zero, U2MODE # Reset UART
SW $zero, U2STA
    
# Enable UART Receive
LI $t0, 1 << 12
SW $t0, U2STASET
    
LI $t0, 1 << 10
SW $t0, U2STASET
    
# Enable UART Module
LI $t0, 1 << 15
SW $t0, U2MODE
    
JR $ra
    
.end setup_UART
    
.ent send
send:
    MOVE $t0, $a0
    startSend:
    LB $t1, 0($t0)
    ADDI $t0, $t0, 1
    BEQZ $t1, endSend
    waitToSend:
        LW $t2, U2STA
        ANDI $t2, $t2, 1 << 9
        BEQZ $t2, endWaitToSend
        J waitToSend
    endWaitToSend:
    SB $t1, U2TXREG
    j startSend
    endSend:
        jr $ra
.end send
	
# ***************************
	
.ent sendLCD
sendLCD:
    MOVE $t0, $a0
    startSendLCD:
    LB $t1, 0($t0)
    ADDI $t0, $t0, 1
    BEQZ $t1, endSendLCD
    waitToSendLCD:
        LW $t2, U1STA
        ANDI $t2, $t2, 1 << 9
        BEQZ $t2, endWaitToSendLCD
        J waitToSendLCD
    endWaitToSendLCD:
    SB $t1, U1TXREG
    j startSendLCD
    endSendLCD:
        jr $ra
.end sendLCD
	
